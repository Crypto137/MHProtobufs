syntax = "proto2";

package Gazillion;

import "CommonMessages.proto";
import "Guild.proto";
import "CsrPortalToGameServer.proto";

enum RegionInstanceResetResultCodes {
	eRIRSuccess	= 0;
	eRIRLimitHit	= 1;
	eRIRNoInstanceToReset	= 2;
}

message CreateGame {
	required uint64	gameid	= 1;
	required int32	admittance	= 2;
}

message CreateRegion {
	required uint64	gameId	= 1;
	required uint64	regionId	= 2;
	required uint64	regionProtoRefId	= 3;
	optional uint32	explicitSeed	= 4;
	optional NetStructCreateRegionParams	createRegionParams	= 5;
}

message ShutdownRegion {
	required uint64	requestingGameId	= 1;
	required uint64	regionInstanceId	= 2;
}

message ShutdownGame {
	required uint64	requestingGameId	= 1;
}

message GameAndRegionForPlayer {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required string	destGameServer	= 3;
	required uint64	destGameId	= 4;
	required NetStructTransferParams	transferParams	= 5;
	optional bool	isTeleportToPlayer	= 7;
	optional uint64	requiredItemEntityId	= 8;
	repeated WorldViewEntry	worldView	= 9;
}

message UnableToChangeRegion {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required ChangeRegionFailed	changeFailed	= 3;
}

message PartyKickGracePeriod {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required uint64	expireTimeMicroseconds	= 3;
	required GroupLeaveReason	leaveReason	= 4;
}

message RegionInstanceResetResult {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required uint64	requestedRegionProtoRefId	= 3;
	required RegionInstanceResetResultCodes	requestResponse	= 4;
	required uint64	requestingAccountGuid	= 5;
}

message SyncTimeReply {
	required int64	gameTimeGameServerSent	= 1;
	required int64	gameTimePlayerMgrReceived	= 2;
	required int64	gameTimePlayerMgrSent	= 3;
	required int64	dateTimeGameServerSent	= 4;
	required int64	dateTimePlayerMgrReceived	= 5;
	required int64	dateTimePlayerMgrSent	= 6;
}

message ReportToPlayerClientConsole {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required string	reportText	= 3;
}

message DisconnectPlayerMessage {
	required uint64	requestingGameId	= 1;
	required uint64	requestingplayerguid	= 2;
	required uint64	requestingaccountguid	= 3;
	required uint64	sessionId	= 4;
}

message PlayerManagerInformation {
	required string	workingDirectory	= 1;
	repeated NetStructLiveTuningSettingProtoEnumValue	tuningTypeKeyValueSettings	= 2;
}

message LFGCommandResponseServer {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required LFGOperation	operation	= 3;
	optional NetStructLFGMember	payload	= 4;
	required LFGOperationResult	opCode	= 5;
	repeated NetStructLFGMember	results	= 6;
	optional uint64	argument	= 7;
}

message CommunitiesReceiveBroadcastBatch {
	repeated CommunityMemberBroadcast	broadcasts	= 1;
	required uint64	broadcastId	= 2;
}

message CommunityBroadcastResults {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	repeated CommunityMemberBroadcast	memberBroadcasts	= 3;
	required uint64	broadcastId	= 4;
}

message ReceiveCommunityNotify {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required CommunityNotify	notification	= 3;
}

message PlayerLookupByNameResult {
	required uint64	requestingGameId	= 1;
	required string	playerName	= 2;
	required uint64	resultPlayerDbId	= 3;
	required uint64	remoteJobId	= 4;
	optional uint64	consoleAccountId	= 5;
	optional uint64	secondaryConsoleAccountId	= 6;
	optional string	secondaryPlayerName	= 7;
}

message PlayerManagerSetLiveTuningValues {
	repeated NetStructLiveTuningSettingProtoEnumValue	tuningTypeKeyValueSettings	= 1;
}

message GuildMessageToServer {
	required uint64	requestingGameId	= 1;
	repeated uint64	destPlayerIds	= 2;
	optional GuildMessageSetToServer	serverMessages	= 3;
	optional GuildMessageSetToClient	clientMessages	= 4;
}

message MatchQueueUpdateData {
	required uint64	updatePlayerGuid	= 1;
	required RegionRequestQueueUpdateVar	status	= 2;
	optional string	updatePlayerName	= 3;
}

message MatchQueueUpdate {
	required uint64	requestingGameId	= 1;
	required uint64	playerId	= 2;
	required uint64	regionProtoId	= 3;
	required uint64	difficultyTierProtoId	= 4;
	required uint32	playersInQueue	= 5;
	optional uint64	regionRequestGroupId	= 6;
	repeated MatchQueueUpdateData	data	= 7;
}

message MatchQueueFlush {
	required uint64	requestingGameId	= 1;
	required uint64	playerId	= 2;
}

message DestroyPortal {
	required uint64	requestingGameId	= 1;
	required NetStructPortalInstance	portal	= 2;
}

message RoutedMessageFromGameInstanceServer {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required string	fromPlayerName	= 3;
	required uint64	fromPlayerDbId	= 4;
	required bytes	payload	= 5;
}

message RoutedMessageResult {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required uint64	toPlayerDbId	= 3;
	optional string	toPlayerDisplayName	= 4;
	required bytes	payload	= 5;
	required bool	success	= 6;
}

message CsrPortalToGameServerFromClientManager {
	required bytes	payload	= 1;
}

message SetDebuggingGIS {
	required bool	debugging	= 1;
}

message WorldViewAddRegions {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	repeated WorldViewEntry	entries	= 3;
	optional bool	replaceOldWorldView	= 4 [default = false];
}

message WorldViewRemoveRegions {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	repeated WorldViewEntry	entries	= 3;
}

message PartyOperationRequestServerResult {
	required uint64	requestingGameId	= 1;
	required uint64	routingPlayerDbGuid	= 2;
	required PartyOperationPayload	request	= 3;
	required GroupingOperationResult	result	= 4;
}

message PartyInfoServerUpdate {
	required uint64	requestingGameId	= 1;
	required uint64	routingPlayerDbGuid	= 2;
	optional uint64	groupId	= 3;
	optional PartyInfo	partyInfo	= 4;
}

message PartyMemberInfoServerUpdate {
	required uint64	requestingGameId	= 1;
	required uint64	routingPlayerDbGuid	= 2;
	required uint64	groupId	= 3;
	required uint64	memberDbGuid	= 4;
	required PartyMemberEvent	memberEvent	= 5;
	optional PartyMemberInfo	memberInfo	= 6;
}

message ClusterCoopOpResult {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required uint32	slot	= 3;
	required CoopOp	operation	= 4;
	required CoopOpResult	result	= 5;
	optional uint64	avatarPrototypeId	= 6;
	optional uint64	consoleAccountId	= 7;
	optional string	consoleOnlineId	= 8;
}

message PlayerNameChangeNotification {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerGuid	= 2;
	required string	newPlayerName	= 3;
	required uint32	avatarIndex	= 4;
}

