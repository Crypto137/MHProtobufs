syntax = "proto2";

package Gazillion;

import "GazillionCommon.proto";
import "CommonMessages.proto";
import "ChatCommon.proto";
import "MatchCommon.proto";
import "BillingCommon.proto";
import "Guild.proto";

enum ForceDisconnectReason {
	eFDR_ErrorLoadingCharacter	= 1;
	eFDR_CheckpointFailed	= 2;
	eFDR_UnableToCreateRegion	= 3;
}

enum CommunityModifyFailureCode {
	eCMFC_Timeout	= 1;
	eCMFC_NoOnlinePlayer	= 2;
}

enum GuildLeaveReason {
	eGLR_Left	= 1;
	eGLR_Kicked	= 2;
}

enum GuildMessageCode {
	eGMC_None	= 1;
	eGMC_GuildNameDirty	= 2;
	eGMC_ServicesDown	= 3;
	eGMC_GuildNameInvalidCharacters	= 4;
	eGMC_GuildNameTooShort	= 5;
	eGMC_GuildNameTooLong	= 6;
	eGMC_GuildNameIdentical	= 7;
	eGMC_GuildNotInGuild	= 8;
	eGMC_GuildsLocked	= 9;
}

message NetMessageReadyAndLoggedIn {
}

message NetMessageReadyForTimeSync {
}

message NetMessageLocalPlayer {
	required uint64	localPlayerEntityId	= 1;
}

message NetMessageEntityCreate {
	required uint64	prototypeId	= 1;
	required uint64	idEntity	= 2;
	required bytes	archiveData	= 3;
	required uint32	interestPolicies	= 4;
	required uint64	dbId	= 5;
	optional NetStructPoint3	position	= 6;
	optional NetStructPoint3	orientation	= 7;
	optional NetStructLocomotionState	locomotionState	= 8;
	optional uint64	invLocContainerEntityId	= 9;
	optional uint64	invLocInventoryPrototypeId	= 10;
	optional uint32	invLocSlot	= 11;
	optional bool	isNewOnServer	= 12;
	optional uint64	sourceEntityId	= 13;
	optional NetStructPoint3	sourcePosition	= 14;
	optional uint32	cellId	= 15;
	optional uint32	areaId	= 16;
	optional bool	initConditionComponent	= 17;
	optional bool	overrideSnapToFloorOnSpawn	= 18;
	optional bool	isClientEntityHidden	= 19;
	optional bool	startFullInWorldHierarchyUpdate	= 20;
}

message NetMessageEntityDestroy {
	required uint64	idEntity	= 1;
	optional uint64	prototypeId	= 2;
	optional uint32	cellId	= 3;
	optional uint32	areaId	= 4;
	optional uint64	regionId	= 5;
	optional NetStructPoint3	position	= 6;
	optional uint64	ownerEntityId	= 7;
	optional uint64	ownerPrototypeId	= 8;
	optional string	entityServerString	= 9;
}

message NetMessageInventoryMove {
	required uint64	entityId	= 1;
	required uint64	invLocContainerEntityId	= 2;
	required uint64	invLocInventoryPrototypeId	= 3;
	required uint32	invLocSlot	= 4;
	optional bool	requiredNoOwnerOnClient	= 5;
	optional uint64	entityDataId	= 6;
	optional uint64	destOwnerDataId	= 7;
}

message NetMessageInventoryExit {
	required uint64	entityId	= 1;
	optional uint64	entityDataId	= 2;
}

message NetMessageInventoryUnlock {
	required uint64	invProtoId	= 1;
}

message NetMessagePermaBuffUnlock {
	required uint64	permaBuffProtoId	= 1;
}

message NetMessageEntityKill {
	required uint64	idEntity	= 1;
	required uint64	idKillerEntity	= 2;
	required uint32	killFlags	= 3;
}

message NetMessageQueueFullscreenMovie {
	optional uint64	moviePrototypeId	= 1;
}

message NetMessageQueueLoadingScreen {
	optional uint64	regionPrototypeId	= 1;
}

message NetMessageDequeueLoadingScreen {
}

message NetMessageRegionChange {
	required uint64	regionId	= 1;
	required uint64	serverGameId	= 2;
	required bool	clearingAllInterest	= 3;
	repeated uint64	entitiestodestroy	= 4;
	optional uint64	regionPrototypeId	= 5;
	optional int32	regionRandomSeed	= 6;
	optional bytes	archiveData	= 7;
	optional NetStructPoint3	regionMin	= 8;
	optional NetStructPoint3	regionMax	= 9;
	optional NetStructCreateRegionParams	createRegionParams	= 10;
}

message NetMessageEntityPosition {
	required uint64	idEntity	= 1;
	required uint32	flags	= 2;
	optional NetStructPoint3	position	= 3;
	optional NetStructPoint3	orientation	= 4;
	optional uint32	cellId	= 5;
	optional uint32	areaId	= 6;
	optional uint64	entityPrototypeId	= 7;
}

message NetMessageLocomotionStateUpdate {
	required uint64	idEntity	= 1;
	required NetStructLocomotionState	locomotionstate	= 2;
	required NetStructPoint3	position	= 3;
	required NetStructPoint3	orientation	= 4;
	optional uint64	entityPrototypeId	= 5;
}

message NetMessageInterestPolicies {
	required uint64	idEntity	= 1;
	required uint32	newPolicies	= 2;
	required uint32	prevPolicies	= 3;
	optional uint64	entityDataId	= 4;
}

message NetMessageUnableToCreateRegion {
	required uint64	regionProtoId	= 1;
	required uint64	requiredItemProtoId	= 2;
	required uint32	regionTransferFailure	= 3;
}

message NetStructAreaConnection {
	required uint32	areaId	= 1;
	required NetStructIPoint2	connectPoint	= 2;
}

message NetMessageAddArea {
	required uint32	areaId	= 1;
	required uint64	areaPrototypeId	= 2;
	required NetStructPoint3	areaOrigin	= 3;
	optional bool	isStartArea	= 4;
}

message NetMessageRemoveArea {
	required uint32	areaId	= 1;
}

message NetStructReservedSpawn {
	required uint64	asset	= 1;
	required uint32	id	= 2;
}

message NetMessageCellCreate {
	required uint32	areaId	= 1;
	required uint32	cellId	= 2;
	required uint64	cellPrototypeId	= 3;
	required NetStructPoint3	positionInArea	= 4;
	required uint32	depth	= 5;
	required int32	cellRandomSeed	= 6;
	repeated NetStructReservedSpawn	encounters	= 7;
	required int32	bufferwidth	= 8;
	required uint64	overrideLocationName	= 9;
}

message NetMessageCellDestroy {
	required uint32	areaId	= 1;
	required uint32	cellId	= 2;
}

message NetMessageEnvironmentUpdate {
	required uint32	flags	= 1;
}

message NetMessageDebugSpawnMapVisualization {
	required bool	visualize	= 1;
	required uint32	areaid	= 2;
	required uint32	boundsx	= 3;
	required uint32	boundsy	= 4;
	optional bytes	mapdata	= 5;
}

message NetMessageChangeAOIPolicies {
	required uint64	idEntity	= 1;
	required uint32	currentpolicies	= 2;
	optional bool	exitGameWorld	= 3;
	optional uint64	entityPrototypeId	= 4;
}

message NetMessageFullInWorldHierarchyUpdateEnd {
	required uint64	idEntity	= 1;
}

message NetMessageFullInWorldHierarchyUpdateBegin {
	required uint64	idEntity	= 1;
}

message NetMessageAdminCommandResponse {
	required string	response	= 1;
}

message NetMessageActivatePowerFailed {
	required uint32	reason	= 1;
	required uint64	powerPrototypeId	= 2;
}

message NetMessageCancelPower {
	required uint64	idAgent	= 1;
	required uint64	powerPrototypeId	= 2;
	required uint32	endPowerFlags	= 3;
}

message NetMessageContinuousPowerUpdateToClient {
	required uint64	idAvatar	= 1;
	required uint64	powerPrototypeId	= 2;
	optional uint64	idTargetEntity	= 3;
	optional NetStructPoint3	targetPosition	= 4;
}

message NetMessageActivatePower {
	required uint64	idUserEntity	= 1;
	required uint64	powerPrototypeId	= 2;
	required uint64	parentPowerPrototypeId	= 3;
	required uint64	idTargetEntity	= 4;
	required NetStructPoint3	targetPosition	= 5;
	required NetStructPoint3	userPosition	= 6;
	optional float	moveTimeSeconds	= 7;
	optional float	variableActivationTime	= 8;
	optional uint32	missileRandomSeed	= 9;
}

message NetMessagePreActivatePower {
	required uint64	idUserEntity	= 1;
	required uint64	powerPrototypeId	= 2;
	required uint64	idTargetEntity	= 3;
	required NetStructPoint3	targetPosition	= 4;
}

message NetMessagePowerResult {
	required uint64	idTargetEntity	= 1;
	required uint64	idPowerOwnerEntity	= 2;
	required uint64	idUltimateOwnerEntity	= 3;
	required uint64	powerPrototypeId	= 4;
	required uint64	deliveryDelayMS	= 5;
	required uint64	flags	= 6;
	required NetStructPropertyList	properties	= 7;
	required NetStructPoint3	powerOwnerPosition	= 8;
	optional uint64	transferToEntityId	= 9 [default = 0];
	optional uint64	targetEntityPrototypeId	= 10 [default = 0];
	optional uint64	powerOwnerEntityPrototypeId	= 11 [default = 0];
	optional uint64	ultimateOwnerEntityPrototypeId	= 12 [default = 0];
	optional uint64	powerOwnerRegionPrototypeId	= 13 [default = 0];
	optional uint64	transferToEntityPrototypeId	= 14 [default = 0];
	optional string	targetServerString	= 15;
}

message NetMessagePowerBounce {
	required uint64	idPowerUser	= 1;
	required uint64	idLastTarget	= 2;
	required NetStructPoint3	lastTargetPosition	= 3;
	required uint64	idNewTarget	= 4;
	required uint64	powerPrototypeId	= 5;
	required uint64	userOriginalAssetId	= 6;
	required uint64	userCurrentAssetId	= 7;
	required float	projectileSpeed	= 8;
}

message NetMessagePowerWeaponMissing {
	required uint64	idOwner	= 1;
	required bool	weaponMissing	= 2;
}

message NetMessageOnPreInteractPowerEnd {
	required uint64	idTargetEntity	= 1;
}

message NetMessageRegionPrimitiveBox {
	required NetStructPoint3	center	= 1;
	required NetStructPoint3	size	= 2;
	required NetStructIPoint3	color	= 3;
	required uint64	lifetimeInMilliseconds	= 4;
	required bool	add	= 5;
}

message NetMessageRegionPrimitiveTriangle {
	required NetStructPoint3	point0	= 1;
	required NetStructPoint3	point1	= 2;
	required NetStructPoint3	point2	= 3;
	required NetStructIPoint3	color	= 4;
	required uint64	lifetimeInMilliseconds	= 5;
	required bool	add	= 6;
}

message NetMessageRegionPrimitiveSphere {
	required NetStructPoint3	center	= 1;
	required float	radius	= 2;
	required NetStructIPoint3	color	= 3;
	required uint64	lifetimeInMilliseconds	= 4;
	required bool	add	= 5;
}

message NetMessageRegionPrimitiveLine {
	required NetStructPoint3	start	= 1;
	required NetStructPoint3	end	= 2;
	required NetStructIPoint3	color	= 3;
	required uint64	lifetimeInMilliseconds	= 4;
	required bool	add	= 5;
}

message NetMessageMarkFirstGameFrame {
	required uint64	currentservergametime	= 1;
	required uint64	currentservergameid	= 2;
}

message NetMessageBeginExitGame {
}

message NetMessageSystemMessage {
	required int32	messageId	= 1;
}

message NetMessageAIDebugUIUpdate {
	required uint64	idTargetNPC	= 1;
	required string	currentActionName	= 2;
	required string	previousActionName	= 3;
	repeated string	sensoryInputs	= 4;
	required string	propertyString	= 5;
}

message NetMessagePropertiesDebugUIUpdate {
	required uint64	idTargetEntity	= 1;
	required string	propertyString	= 2;
}

message NetMessageConditionsDebugUIUpdate {
	required uint64	idTargetEntity	= 1;
	required string	conditionsString	= 2;
}

message NetMessagePowersDebugUIUpdate {
	required uint64	debugEntityId	= 1;
	required uint64	activePowerId	= 2;
	required int32	pendingActionState	= 3;
	required uint64	pendingPowerId	= 4;
	required uint64	pendingTargetId	= 5;
	required NetStructPoint3	pendingTargetPosition	= 6;
	required uint64	continuousPowerId	= 7;
	required uint64	continuousTargetId	= 8;
	required NetStructPoint3	continuousTargetPosition	= 9;
	required uint64	activePowerLastActivationTime	= 10;
}

message NetMessageMissionDebugUIUpdate {
	repeated string	missionStrings	= 1;
}

message NetMessageDebugEntityPosition {
	required uint64	entityId	= 1;
	required NetStructPoint3	position	= 2;
}

message NetMessagePingResponse {
	required bool	displayOutput	= 1;
	required uint64	requestSentClientTime	= 2;
	optional uint64	requestSentGameTime	= 3;
	optional uint64	requestNetReceivedGameTime	= 4;
	optional uint64	responseSendTime	= 5;
	optional uint64	responseNetReceiveClientTime	= 6;
	optional uint64	responseNetReceiveGameTime	= 7;
	optional uint64	serverTimeSinceLastGameUpdate	= 8;
	optional uint64	responseLatencyBufferReceiveClientTime	= 9;
}

message NetMessageEntityEnterGameWorld {
	required uint64	entityId	= 1;
	required NetStructPoint3	position	= 2;
	optional NetStructPoint3	orientation	= 3;
	optional NetStructLocomotionState	locomotionState	= 4;
	optional uint64	entityPrototypeId	= 5;
	optional bool	isClientEntityHidden	= 6;
}

message NetMessageTeleportAckRequest {
	required uint32	ackseq	= 1;
}

message NetMessageServerVersion {
	required string	version	= 1;
}

message NetStructAffixSpec {
	required uint64	affixProtoRef	= 1;
	required uint64	scopeProtoRef	= 2;
}

message NetStructItemSpec {
	required uint64	itemProtoRef	= 1;
	required uint32	itemLevel	= 2;
	required uint64	rarityProtoRef	= 3;
	required uint32	seed	= 4;
	optional uint32	creditsAmount	= 5;
	repeated NetStructAffixSpec	affixSpecs	= 6;
}

message NetStructItemSpecEntry {
	required uint64	key	= 1;
	required NetStructItemSpec	itemSpec	= 2;
}

message NetMessageMissionUpdate {
	required uint64	missionPrototypeId	= 1;
	optional uint32	missionState	= 2;
	optional uint64	missionStateExpireTime	= 3;
	optional uint32	xpAwarded	= 4;
	optional uint32	creditsAwarded	= 5;
	optional uint32	powerPointsAwarded	= 6;
	optional uint32	healthBonusAwarded	= 7;
	optional uint32	enduranceBonusAwarded	= 8;
	repeated uint64	participants	= 9;
	repeated NetStructItemSpecEntry	items	= 10;
	optional bool	create	= 11;
	optional bool	suppressNotification	= 12;
}

message NetMessageMissionObjectiveUpdate {
	required uint64	missionPrototypeId	= 1;
	required uint32	objectiveIndex	= 2;
	optional uint32	objectiveState	= 3;
	optional uint64	objectiveStateExpireTime	= 4;
	optional uint32	completedCount	= 5;
	optional uint32	totalCount	= 6;
	repeated uint64	interactedEntities	= 7;
	optional bool	create	= 8;
	optional bool	suppressNotification	= 9;
}

message NetMessageCurrentAvatarChanged {
	required uint64	lastCurrentEntityId	= 1;
}

message NetMessageNewAvatarAcquired {
	required uint64	prototypeId	= 1;
}

message NetStructPrefetchEntityPower {
	required uint64	entityAssetId	= 1;
	required uint64	powerPrototypeId	= 2;
}

message NetStructPrefetchCell {
	required uint32	cellId	= 1;
	required uint64	cellPrototypeId	= 2;
}

message NetMessagePrefetchAssets {
	required bool	backgroundload	= 1;
	repeated uint64	assets	= 2;
	repeated uint64	prototypes	= 3;
	repeated NetStructPrefetchEntityPower	powers	= 4;
	repeated NetStructPrefetchCell	cells	= 5;
	optional uint64	regionId	= 6;
}

message NetMessagePrefetchRegionsForDownload {
	repeated uint64	prototypes	= 1;
}

message NetMessageQueryIsRegionAvailable {
	required uint64	regionPrototype	= 1;
}

message NetMessageShowOverheadText {
	required uint64	idAgent	= 1;
	required uint64	idText	= 2;
	required float	duration	= 3;
}

message NetMessageAIToggleState {
	required bool	state	= 1;
}

message NetMessageDamageToggleState {
	required bool	state	= 1;
}

message NetStructMatchQueueEntry {
	required uint32	queueIndex	= 1;
	required uint64	queuePrototypeId	= 2;
	required bool	canQueueParty	= 3;
}

message NetMessageMatchQueueListResponse {
	repeated NetStructMatchQueueEntry	list	= 1;
}

message NetMessageMatchQueueResponse {
	required uint32	queueIndex	= 1;
	required uint64	queuePrototypeId	= 2;
}

message NetMessageMatchInviteNotification {
	required uint32	queueIndex	= 1;
	required uint64	queuePrototypeId	= 2;
	required uint64	matchNumber	= 3;
}

message NetMessageMatchStatsResponse {
	required uint32	statRequestNumber	= 1;
	required bool	playerFound	= 2;
	repeated MatchPlayerStatisticsSummary	summaries	= 3;
}

message NetMessageMatchTeamRosterNotification {
	required uint64	metaGameEntityId	= 1;
	required uint64	teamPrototypeId	= 2;
	repeated uint64	playerDbGuids	= 3;
}

message NetMessageMatchTeamSizeNotification {
	required uint64	metaGameEntityId	= 1;
	required uint32	teamSize	= 2;
}

message NetMessageChatFromGameSystem {
	required ChatRoomTypes	type	= 1;
	required uint64	sourceStringId	= 2;
	required uint64	messageStringId	= 3;
}

message NetMessageChatError {
	required ChatErrorMessages	errorMessage	= 1;
}

message NetMessageCatalogItems {
	optional int64	timestamp	= 1;
	repeated MarvelHeroesCatalogEntry	entries	= 2;
	repeated MHLocalizedCatalogUrls	urls	= 3;
}

message NetMessageGetCurrencyBalanceResponse {
	required int64	currencyBalance	= 1;
}

message NetMessageBuyItemFromCatalogResponse {
	required bool	didSucceed	= 1;
	required int64	currentCurrencyBalance	= 2;
	optional string	errormessage	= 3;
	required BuyItemResultErrorCodes	errorcode	= 4;
	required int64	skuId	= 5;
}

message NetMessageEntityPreviewerNewTarget {
	required uint64	entityId	= 1;
}

message NetMessageServerNotification {
	required string	serverMessage	= 1;
}

message NetMessageRemoteMissionNotification {
	required uint64	entityPrototypeId	= 1;
	required uint64	dialogTextStringId	= 2;
	required uint64	missionPrototypeId	= 3;
	required uint64	iconPathOverrideId	= 4;
}

message NetMessageUINotificationMessage {
	required uint64	uiNotificationRef	= 1;
}

message NetMessageStartPvPTimer {
	required uint32	startTime	= 1;
	required uint32	endTime	= 2;
	required uint32	lowTimeWarning	= 3;
	required uint32	criticalTimeWarning	= 4;
	required uint64	metaGameId	= 5;
}

message NetMessageSetDifficultyThresholds {
	required uint32	warningThreshold	= 1;
	required uint32	failureThreshold	= 2;
}

message NetMessageSetTimerText {
	required uint64	timerTextId	= 1;
	optional int64	arg1	= 3;
}

message NetMessageSetModeText {
	required uint64	modeTextId	= 1;
	required uint64	modeRef	= 2;
	required uint64	metaGameId	= 3;
}

message NetMessageSetExtraText {
	required uint64	extraTextId	= 1;
}

message NetMessageBannerMessage {
	required uint64	bannerText	= 1;
	required uint64	fontColor	= 2;
	required uint32	fontSize	= 3;
	required uint32	timeToLiveMS	= 4;
	required uint32	messageStyle	= 5;
	required bool	doNotQueue	= 6;
}

message NetMessageAIAggroNotification {
	required uint64	bannerMessageRef	= 1;
	required uint64	aiRef	= 2;
	required uint64	playerId	= 3;
}

message NetMessageStoryNotification {
	required uint64	displayTextStringId	= 1;
	required uint64	speakingEntityPrototypeId	= 2;
	required uint32	timeToLiveMS	= 3;
}

message NetMessageSyncTimeReply {
	required int64	gameTimeClientSent	= 1;
	required int64	gameTimeServerReceived	= 2;
	required int64	gameTimeServerSent	= 3;
	required int64	dateTimeClientSent	= 4;
	required int64	dateTimeServerReceived	= 5;
	required int64	dateTimeServerSent	= 6;
	required float	dialation	= 7;
	required int64	gametimeDialationStarted	= 8;
	required int64	datetimeDialationStarted	= 9;
}

message NetMessageSelectStartingAvatarForNewPlayer {
}

message NetMessageShowKioskStartScreen {
}

message NetMessageInventoryFull {
	required uint64	playerID	= 1;
	required uint64	itemID	= 2;
}

message NetMessageUnloadPackagesStart {
}

message NetMessageUnloadPackagesEnd {
}

message NetMessageForceDisconnect {
	required ForceDisconnectReason	reason	= 1;
}

message NetMessageLevelUp {
	required uint64	entityID	= 1;
}

message NetMessageVendorLevelUp {
	required uint64	vendorTypeProtoId	= 1;
	required uint64	vendorID	= 2;
}

message NetMessageVendorRefresh {
	required uint64	vendorTypeProtoId	= 1;
}

message NetMessageCraftingFinished {
	required uint64	recipeProtoId	= 1;
}

message NetMessageCraftingFailed {
	required uint64	recipeProtoId	= 1;
}

message NetMessageWaypointUnlocked {
	required uint64	waypointPrototypeID	= 1;
}

message NetMessageReplicationArchive {
	required uint64	replicationId	= 1;
	optional uint32	archiveDataType	= 2 [default = 0];
	required bytes	archiveData	= 3;
	optional string	debugstring	= 4;
}

message NetMessagePvPScoreScoreUpdateEntry {
	required uint32	category	= 1;
	required int32	value	= 2;
}

message NetMessagePvPScorePlayerNewId {
	required uint64	pvpEntityId	= 1;
	required uint64	playerDbGuid	= 2;
	required string	playerName	= 3;
	required uint64	teamProtoId	= 4;
}

message NetMessagePvPScorePlayerTeamChange {
	required uint64	pvpEntityId	= 1;
	required uint64	playerDbGuid	= 2;
	required uint64	teamProtoId	= 3;
}

message NetMessagePvPScorePlayerUpdate {
	required uint64	pvpEntityId	= 1;
	required uint64	playerDbGuid	= 2;
	repeated NetMessagePvPScoreScoreUpdateEntry	updates	= 3;
}

message NetMessageTransitionUpdate {
	required uint64	idEntity	= 1;
}

message NetMessageAvatarNameChange {
	required uint64	idEntity	= 1;
}

message NetMessageMissionInteractRepeat {
	required uint64	targetEntityId	= 1;
	required uint64	missionPrototypeId	= 2;
}

message NetMessageMissionInteractRelease {
}

message NetMessageOnAddCondition {
	required uint64	idEntity	= 1;
	required uint64	key	= 2;
	optional string	entityServerString	= 3;
	optional string	conditionServerString	= 4;
}

message NetMessageOnRemoveCondition {
	required uint64	idEntity	= 1;
	required uint64	key	= 2;
}

message NetMessageHotkeyAssign {
	required uint64	avatarId	= 1;
	required uint64	abilityProtoId	= 2;
	required int32	slot	= 3;
	required int32	destinationSlot	= 4;
}

message NetMessageHotkeyUnassign {
	required uint64	avatarId	= 1;
	required int32	slot	= 2;
}

message NetMessageAbilityAssign {
	required uint64	avatarId	= 1;
	required uint64	abilityProtoId	= 2;
	required int32	slot	= 3;
}

message NetMessageAbilityUnassign {
	required uint64	avatarId	= 1;
	required int32	slot	= 2;
}

message NetMessageAbilitySwap {
	required uint64	avatarId	= 1;
	required int32	slotA	= 2;
	required int32	slotB	= 3;
}

message NetMessagePowerCollectionAssignPower {
	required uint64	entityId	= 1;
	required uint64	powerProtoId	= 2;
	required uint64	targetentityid	= 4;
	required int32	powerRank	= 5;
	required int32	characterLevel	= 6;
	required int32	itemLevel	= 7;
	required bool	powerCollectionIsduplicating	= 8;
}

message NetMessageAssignPowerCollection {
	repeated NetMessagePowerCollectionAssignPower	power	= 1;
}

message NetMessagePowerCollectionUnassignPower {
	required uint64	entityId	= 1;
	required uint64	powerProtoId	= 2;
	required uint64	targetentityid	= 3;
}

message NetMessageOnWaypointUpdated {
	required uint64	idPlayer	= 1;
}

message NetMessageInternalReportPlayerLoadError {
	required string	serverReport	= 1;
}

message MessageReportEntry {
	required string	messageName	= 1;
	required uint64	totalCount	= 2;
	required uint64	totalBytes	= 3;
}

message NetMessageMessageReport {
	repeated MessageReportEntry	reports	= 1;
	required uint32	reportSource	= 2;
	required uint32	reportDirection	= 3;
}

message NetMessageUpdateMiniMap {
	required bytes	archiveData	= 1;
}

message NetMessageMoveToAlternateLandingSpot {
	required uint64	idEntity	= 1;
	required NetStructPoint3	landingPosition	= 2;
	required uint64	landingPowerprototypeId	= 3;
}

message NetMessageConsoleMessage {
	required string	messageText	= 1;
}

message NetMessageAvatarOnKilledInfoOverride {
	required uint64	regionId	= 1;
	required uint64	avatarOnKilledInfoProtoId	= 2;
}

message NetMessageOnResurrect {
	required uint64	targetId	= 1;
}

message NetMessageOnResurrectRequest {
	required uint64	targetId	= 1;
	required uint64	resurrectorId	= 2;
}

message NetMessageOnResurrectDecline {
	required uint64	targetId	= 1;
}

message NetMessageReloadPackagesStart {
}

message NetMessagePlayStoryBanter {
	required uint64	banterAssetId	= 1;
}

message NetMessagePlayKismetSeq {
	required uint64	kismetSeqPrototypeId	= 1;
}

message NetMessageGracefulDisconnectAck {
}

message NetMessageLiveTuningUpdate {
	repeated NetStructLiveTuningSettingEnumValue	globalTuningSettings	= 1;
	repeated NetStructLiveTuningSettingProtoEnumValue	perPowerTuningSettings	= 2;
}

message NetMessageUpdateSituationalTarget {
	required uint64	powerOwnerId	= 1;
	required uint64	situationalPowerProtoId	= 2;
	required uint64	situationalTargetId	= 3;
	required bool	addTarget	= 4;
}

message NetMessageConfirmStartNewGame {
}

message NetMessageModifyCommunityMemberFailure {
	required string	memberToModifyName	= 1;
	required CommunityModifyFailureCode	failureCode	= 2;
	required uint64	circleId	= 3;
	required ModifyCircleOperation	operation	= 4;
}

message NetMessageModifyCommunityMember {
	required CommunityMemberBroadcast	broadcast	= 1;
	optional string	playerName	= 2;
	optional uint64	systemCirclesBitSet	= 3;
}

message NetMessageReceiveCommunityNotify {
	required CommunityNotify	notify	= 1;
}

message NetMessageItemBindingChanged {
	required uint64	itemId	= 1;
	required bool	accountBound	= 2;
	required uint64	avatarProtoId	= 3;
}

message NetMessageItemsHeldForRecovery {
	repeated uint64	itemIds	= 1;
}

message NetMessageItemRecovered {
	required uint64	itemId	= 1;
}

message NetMessageSwitchToPendingNewAvatarFailed {
	required uint64	targetId	= 1;
	required bool	invalidLocation	= 2;
}

message NetMessageGuildMessageToClient {
	required GuildMessageSetToClient	messages	= 1;
}

message NetMessageEntityGuildInfo {
	required uint64	entityId	= 1;
	required uint64	guildId	= 2;
	required string	guildName	= 3;
	required GuildMembership	guildMembership	= 4;
	optional string	debugEntityServerString	= 5;
}

message NetMessageLeaveGuild {
	required uint64	guildId	= 1;
	required GuildLeaveReason	reason	= 2;
	required string	initiatingPlayerName	= 3;
}

message NetMessageGuildSystemMessage {
	required GuildMessageCode	code	= 1;
}

message NetMessageRegionDifficultyChange {
	required uint64	difficultyIndex	= 1;
}

message NetMessageMetaGameWaveUpdate {
	required uint64	currentWaveCount	= 1;
	required uint64	maxWaveCount	= 2;
	required uint64	metaGameId	= 3;
}

message NetMessagePvEInstanceCrystalUpdate {
	required uint64	currentCrystalCount	= 1;
	required uint64	maxCrystalCount	= 2;
	required uint64	metaGameId	= 3;
}

message NetMessagePvEInstanceDeathUpdate {
	required uint64	currentDeathCount	= 1;
	required uint64	metaGameId	= 2;
}

message NetMessageShowTutorialTip {
	required uint64	tipDataRefId	= 1;
}

