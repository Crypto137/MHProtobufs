syntax = "proto2";

package Gazillion;

import "GazillionCommon.proto";
import "CommonMessages.proto";
import "ChatCommon.proto";
import "Guild.proto";

message NetMessageReadyForGameJoin {
	required string	playerName	= 1;
	required int32	wipesDataIfMismatchedInDb	= 3 [default = 0];
	optional bool	wipePlayerRecordsOnLogin	= 2 [default = false];
	optional string	domainLoginName	= 4;
	optional bytes	playerImportData	= 5;
}

message NetMessagePlayerSystemMetrics {
	required int32	compatLevelCpu	= 1 [default = -1];
	required int32	compatLevelGpu	= 2 [default = -1];
	required int32	compatLevelComposite	= 3 [default = -1];
	optional string	osName	= 4;
	optional string	cpuName	= 5;
	optional string	ramName	= 6;
	optional string	displayDeviceName	= 7;
	optional bool	displayDeviceDualGPU	= 8;
	optional string	displayDeviceDriverDate	= 9;
}

message NetMessageSyncTimeRequest {
	required int64	gameTimeClientSent	= 1;
	required int64	dateTimeClientSent	= 2;
}

message NetMessageSetTimeDialation {
	required int64	gameTimeDialationStarted	= 1;
	required int64	dateTimeDialationStarted	= 2;
	required float	dialation	= 3;
}

message NetMessageIsRegionAvailable {
	required uint64	regionPrototype	= 1;
	required bool	isAvailable	= 2;
}

message NetMessageUpdateAvatarState {
	required uint64	idAvatar	= 1;
	required NetStructPoint3	position	= 2;
	required NetStructPoint3	orientation	= 3;
	optional NetStructLocomotionState	locomotionstate	= 4;
	optional bool	isTeleport	= 5;
}

message NetMessageCellLoaded {
	required uint32	cellId	= 1;
	required uint64	regionId	= 2;
}

message NetMessageTeleportAckResponse {
	required uint32	ackseq	= 1;
}

message NetMessageAdminCommand {
	required string	command	= 1;
}

message NetMessageTryActivatePower {
	required uint64	idUserEntity	= 1;
	required uint64	powerPrototypeId	= 2;
	optional uint64	idTargetEntity	= 3;
	optional NetStructPoint3	targetPosition	= 4;
	optional float	movementSpeed	= 5;
	optional uint64	movementTimeMS	= 6;
	optional uint32	missileRandomSeed	= 7;
	optional uint64	itemSourceId	= 8;
}

message NetMessagePowerRelease {
	required uint64	idUserEntity	= 1;
	required uint64	powerPrototypeId	= 2;
	optional uint64	idTargetEntity	= 3;
	optional NetStructPoint3	targetPosition	= 4;
}

message NetMessageTryCancelPower {
	required uint64	idUserEntity	= 1;
	required uint64	powerPrototypeId	= 2;
	required uint32	endPowerFlags	= 3;
}

message NetMessageTryCancelActivePower {
	required uint64	idUserEntity	= 1;
}

message NetMessageContinuousPowerUpdateToServer {
	required uint64	powerPrototypeId	= 1;
	optional uint64	idTargetEntity	= 2;
	optional NetStructPoint3	targetPosition	= 3;
}

message NetMessageCancelPendingAction {
}

message NetMessageConfirmWeaponMissingStatus {
	required uint64	idOwner	= 1;
}

message NetMessageStartAIDebugUI {
	required uint64	idTargetNPC	= 1;
}

message NetMessageStopAIDebugUI {
	required uint64	idTargetNPC	= 1;
}

message NetMessageStartMissionDebugUI {
	required uint64	idTargetAgent	= 1;
	required uint64	missionPrototypeRefId	= 2;
	required string	missionListMatchPattern	= 3;
}

message NetMessageStopMissionDebugUI {
	required uint64	idTargetAgent	= 1;
}

message NetMessageStartPropertiesDebugUI {
	required uint64	idTargetEntity	= 1;
}

message NetMessageStopPropertiesDebugUI {
	required uint64	idTargetEntity	= 1;
}

message NetMessageStartConditionsDebugUI {
	required uint64	idTargetEntity	= 1;
}

message NetMessageStopConditionsDebugUI {
	required uint64	idTargetEntity	= 1;
}

message NetMessageStartPowersDebugUI {
	required uint64	idTargetEntity	= 1;
}

message NetMessageStopPowersDebugUI {
	required uint64	idTargetEntity	= 1;
}

message NetMessagePing {
	required bool	displayOutput	= 1;
	required uint64	sendClientTime	= 2;
	optional uint64	sendGameTime	= 3;
	optional uint64	requestNetReceivedGameTime	= 4;
	optional uint64	lastClientLatency	= 5;
	optional float	lastFps	= 6;
	optional uint64	regionPrototype	= 7;
	optional uint32	cpulevel	= 8;
	optional uint32	gpulevel	= 9;
	optional uint32	compositelevel	= 10;
	optional float	minFps	= 11;
	optional NetStructPoint3	minFpsPos	= 12;
}

message NetMessagePickupInteraction {
	required uint64	idTarget	= 1;
	optional bool	useInteractFallbackRange	= 2;
}

message NetMessageTryInventoryMove {
	required uint64	itemId	= 1;
	required uint64	toInventoryOwnerId	= 2;
	required uint64	toInventoryPrototype	= 3;
	required uint32	toSlot	= 4;
}

message NetMessageTryMoveCraftingResultsToGeneral {
}

message NetMessageInventoryTrashItem {
	required uint64	itemId	= 1;
}

message NetMessageThrowInteraction {
	required uint64	idTarget	= 1;
}

message NetMessagePerformPreInteractPower {
	required uint64	idTarget	= 1;
	required bool	hasDialog	= 2;
}

message NetMessageUseInteractableObject {
	required uint64	idTarget	= 1;
	optional uint64	missionPrototypeRef	= 2;
}

message NetMessageTryCraft {
	required uint64	idRecipe	= 1;
	required uint64	idVendor	= 2;
	repeated uint64	idIngredients	= 3;
}

message NetMessageUseWaypoint {
	required uint64	idTransitionEntity	= 1;
	required uint64	waypointDataRef	= 2;
}

message NetMessageDebugAcquireAndSwitchToAvatar {
	required uint64	avatarPrototypeId	= 1;
}

message NetMessageSwitchAvatar {
	required uint64	avatarId	= 1;
}

message NetMessageAssignHotkey {
	required uint64	avatarId	= 1;
	required uint64	prototypeRefId	= 2;
	required uint32	slotNumber	= 3;
	required uint32	destinationSlotNumber	= 4;
}

message NetMessageUnassignHotkey {
	required uint64	avatarId	= 1;
	required uint32	slotNumber	= 2;
}

message NetMessageAssignAbility {
	required uint64	avatarId	= 1;
	required uint64	prototypeRefId	= 2;
	required uint32	slotNumber	= 3;
}

message NetMessageUnassignAbility {
	required uint64	avatarId	= 1;
	required uint32	slotNumber	= 2;
}

message NetMessageSwapAbilities {
	required uint64	avatarId	= 1;
	required uint32	slotNumberA	= 2;
	required uint32	slotNumberB	= 3;
}

message NetMessageModCommitTemporary {
	required uint64	avatarRef	= 1;
	required uint64	modTypeRef	= 2;
	repeated NetStructModChangeObject	changes	= 3;
}

message NetMessageModReset {
	required uint64	avatarId	= 1;
	required uint64	modTypeRef	= 2;
}

message NetMessagePowerPointAllocationCommit {
	required uint64	avatarRef	= 1;
	repeated NetStructPowerPointAllocation	allocations	= 2;
}

message NetMessageRequestDeathRelease {
	required bool	hitOk	= 1;
	required bool	resurrectedFromOtherEntity	= 2;
}

message NetMessageRequestResurrectDecline {
}

message NetMessageRequestResurrectAvatar {
	optional uint64	targetId	= 1;
}

message NetMessageReturnToHub {
}

message NetMessageRequestStoryWarp {
	required uint64	storyWarpPrototypeId	= 1;
	required uint64	storyWarpNPC	= 2;
}

message NetMessageInvitePlayer {
	optional uint64	inviteeEntityId	= 1;
	optional string	inviteeName	= 2;
}

message NetMessageRequestPartyJoinPortal {
	required bool	usePortal	= 1;
	optional NetStructWarpDest	warpToDest	= 2;
	optional bool	bypassValidation	= 3;
}

message NetMessageDeclineGroupInvite {
}

message NetMessageLeaveGroup {
}

message NetMessageChangeGroupLeader {
	required uint64	targetMemberId	= 1;
}

message NetMessageBootPlayer {
	required uint64	targetMemberId	= 1;
}

message NetMessageDisbandGroup {
}

message NetMessageMatchQueueListRequest {
}

message NetMessageMatchQueueRequest {
	required uint32	queueIndex	= 1;
	required bool	queueEntireGroup	= 2;
}

message NetMessageMatchStatisticsRequest {
	required uint32	statRequestNumber	= 1;
	required string	playerName	= 2;
}

message NetMessageMatchInviteResponse {
	required uint64	matchNumber	= 1;
	required bool	inviteAccepted	= 2;
}

message NetMessageDuelInvite {
	required uint64	challengerEntityId	= 1;
	optional string	challengerName	= 2;
	optional uint64	opponentEntityId	= 3;
	required string	opponentName	= 4;
}

message NetMessageDuelAccept {
	required uint64	challengedEntityId	= 1;
	optional string	challengedName	= 2;
}

message NetMessageDuelCancel {
	required uint64	cancellingEntityId	= 1;
	optional string	cancellingName	= 2;
}

message NetMessageMetaGameUpdateNotification {
	required uint64	metaGameEntityId	= 1;
}

message NetMessageChat {
	required ChatRoomTypes	roomType	= 1;
	required ChatMessage	theMessage	= 2;
}

message NetMessageTell {
	required string	targetPlayerName	= 1;
	required ChatMessage	theMessage	= 2;
}

message NetMessageReportPlayer {
	required string	targetPlayerName	= 1;
	required string	reason	= 2;
}

message NetMessageGetCatalog {
	optional int64	timestamp	= 3 [default = 0];
	optional uint64	itemPrototypeRuntimeId	= 1 [default = 0];
	optional string	localeid	= 4 [default = "en_us"];
}

message NetMessageGetCurrencyBalance {
}

message NetMessageBuyItemFromCatalog {
	required int64	skuId	= 1;
	required int64	itemUnitPrice	= 2;
	optional int32	numUnits	= 3 [default = 1];
}

message EntityPreviewerEnum {
	enum Alliance {
		Ally	= 0;
		Enemy	= 1;
		Total	= 2;
	}

}

message NetMessageEntityPreviewerNewTargets {
	required EntityPreviewerEnum.Alliance	alliance	= 1;
	optional uint32	numNewTargets	= 2;
}

message NetMessageEntityPreviewerClearTargets {
}

message NetMessageEntityPreviewerSetTargetRef {
	required uint64	targetRefId	= 1;
}

message NetMessageEntityPreviewerActivatePower {
	required uint64	casterId	= 1;
	required uint64	powerRefId	= 2;
	required bool	createTarget	= 3;
	required bool	randomTargetPos	= 4;
}

message NetMessageEntityPreviewerAddTarget {
	required uint64	targetId	= 1;
}

message NetMessageEntityPreviewerSetEntityState {
	required uint64	targetId	= 1;
	required uint64	stateRefId	= 2;
}

message NetMessageEntityPreviewerApplyConditions {
	required uint64	targetId	= 1;
	required uint64	powerRefId	= 2;
}

message NetMessageCreateNewPlayerWithSelectedStartingAvatar {
	required uint64	startingAvatarPrototypeId	= 1;
}

message NetMessageOnKioskStartButtonPressed {
}

message NetMessageNotifyFullscreenMovieFinished {
	required uint64	moviePrototypeId	= 1;
	required bool	userCancelled	= 2;
	required uint32	cinematicsRemaining	= 3;
}

message NetMessageBotSetLevel {
	required int32	level	= 1;
}

message NetMessageBotGodMode {
}

message NetMessageBotPickAvatar {
	required uint64	avatarBotDataId	= 1;
	optional int32	level	= 2;
	optional uint64	lootPrototype	= 3;
	optional uint32	lootTableRoll	= 4;
}

message NetMessageBotRegionChange {
	required uint64	regionDataId	= 1;
}

message NetMessageBotWarpAreaNext {
}

message NetMessageBotLootGive {
	required uint64	lootPrototype	= 1;
	required uint32	lootTableRoll	= 2;
}

message NetMessageBotSetPvPFaction {
	required uint64	factionSetPrototype	= 1;
}

message NetMessageBotPvPQueue {
	required uint64	pvpQueueId	= 1;
}

message NetMessageGetTrackerReport {
	required uint32	messageSource	= 1;
	required uint32	messageDirection	= 2;
}

message NetMessagePlayKismetSeqDone {
	required uint64	kismetSeqPrototypeId	= 1;
}

message NetMessageVerifyFailedForRepId {
	required uint64	repid1	= 1;
	required string	file	= 2;
	required uint32	line	= 3;
	required string	debugmsg	= 4;
	optional uint64	repid2	= 5;
}

message NetMessageGracefulDisconnect {
}

message NetMessageRequestStartNewGame {
}

message NetMessageSetDialogTarget {
	required uint64	targetId	= 1;
}

message NetMessageVendorRequestBuyItemFrom {
	required uint64	itemId	= 1;
	required uint64	vendorId	= 2;
	required uint32	inventorySlot	= 3;
}

message NetMessageVendorRequestSellItemTo {
	required uint64	itemId	= 1;
	required uint64	vendorId	= 2;
}

message NetMessageVendorRequestDonateItemTo {
	required uint64	itemId	= 1;
	required uint64	vendorId	= 2;
}

message NetMessageVendorRequestRefresh {
	required uint64	vendorId	= 1;
}

message NetMessageTryModifyCommunityMemberCircle {
	required uint64	circleId	= 1;
	required ModifyCircleOperation	operation	= 2;
	required string	playerName	= 3;
}

message NetMessageGuildMessageToPlayerManager {
	required GuildMessageSetToPlayerManager	messages	= 1;
}

message NetMessageSetShowTips {
	required bool	showTips	= 1;
}

message NetMessageSetTipSeen {
	required uint64	tipDataRefId	= 1;
}

message NetMessageResetSeenTips {
}

message NetMessageTryMoveInventoryContentsToGeneral {
	required uint64	sourceInventoryPrototype	= 1;
}

message NetMessageAutoPartyingSetEnabled {
	required bool	enabled	= 1;
}

