syntax = "proto2";

package Gazillion;

import "ChatCommon.proto";
import "CommonMessages.proto";

enum GroupingOperationType {
	eGOP_InvitePlayer	= 1;
	eGOP_AcceptInvite	= 2;
	eGOP_ServerNotification	= 3;
	eGOP_KickPlayer	= 4;
}

enum GroupingOperationResult {
	eGOPR_Success	= 1;
	eGOPR_SystemError	= 2;
	eGOPR_TargetPlayerNotFound	= 3;
	eGOPR_TargetedSelf	= 4;
	eGOPR_AlreadyHasInvite	= 5;
	eGOPR_PartyFull	= 6;
	eGOPR_NotLeader	= 7;
	eGOPR_PendingPartyDisbanded	= 8;
	eGOPR_AutoParyPreventsKick	= 9;
	eGOPR_DifficultyModeMismatch	= 10;
	eGOPR_PartyPortalLeadsToMatch	= 11;
	eGOPR_AlreadyInParty	= 12;
}

enum GroupingStateOfPlayer {
	eGSOP_Solo	= 1;
	eGSOP_PendingInvite	= 2;
	eGSOP_InGroup	= 3;
}

message PerPlayerInfo {
	required string	playerName	= 1;
	required uint64	playerSessionId	= 2;
	required uint64	playerDbId	= 3;
}

message ClientInvitedToGroup {
	required string	invitingPlayerName	= 1;
	required uint64	groupId	= 2;
	required bool	usePortal	= 3;
	required bool	hasTemporaryRegions	= 4;
}

message ClientInviteAcceptFailed {
}

message ClientCreateGroup {
	required uint64	groupId	= 1;
	required GroupType	groupType	= 2;
	required uint64	leaderSessionId	= 3;
	required string	leaderName	= 4;
}

message PlayerJoinedGroup {
	required string	joiningPlayerName	= 1;
	required uint64	playerSessionId	= 2;
	required uint64	groupId	= 3;
}

message GroupChangeType {
	required uint64	groupId	= 1;
	required GroupType	type	= 2;
	required bool	confirm	= 3;
}

message PlayerLeftGroup {
	required string	leaverName	= 1;
	required uint64	playerSessionId	= 2;
	optional uint64	newLeaderSessionId	= 3;
	required uint64	groupId	= 4;
	required GroupLeaveReason	leaveReason	= 5;
}

message PlayerChangedGroupLeader {
	required uint64	requestingGameId	= 1;
	required uint64	groupId	= 2;
	required PerPlayerInfo	newLeader	= 3;
	required PerPlayerInfo	oldLeader	= 4;
}

message ClientBootedFromGroup {
	required uint64	groupId	= 1;
	required GroupLeaveReason	leaveReason	= 2;
}

message KickGroupMemberAttemptFailed {
	required GroupingOperationResult	reason	= 1;
}

message PlayerDeclinedInvite {
	optional string	declinerName	= 1;
	optional uint64	declinerSessionId	= 2;
}

message CurrentPartyInfo {
	required uint64	groupId	= 1;
	required GroupType	groupType	= 2;
	required PerPlayerInfo	leader	= 3;
	repeated PerPlayerInfo	members	= 4;
}

message ChatResponseToExternalLogin {
	optional bytes	someresponse	= 1;
}

message ChatNormalMessage {
	required ChatRoomTypes	roomType	= 1;
	required string	fromPlayerName	= 2;
	required ChatMessage	theMessage	= 4;
	optional int32	prestigeLevel	= 5;
}

message ChatTellMessage {
	required string	fromPlayerName	= 1;
	required ChatMessage	theMessage	= 3;
	optional int32	prestigeLevel	= 4;
}

message ChatBroadcastMessage {
	required ChatRoomTypes	roomType	= 1;
	required string	fromPlayerName	= 2;
	required ChatMessage	theMessage	= 3;
	optional int32	prestigeLevel	= 4;
}

message ChatErrorMessage {
	required ChatErrorMessages	errorMessage	= 1;
}

message GroupingReportInvitationDestinationForPortal {
	required uint64	acceptingPlayerDbId	= 1;
	required uint64	invitingPlayerDbId	= 2;
	required uint64	requestingGameId	= 3;
	required bool	usePortal	= 4;
}

message GroupingOperationResultMsg {
	required uint64	requestingGameId	= 1;
	required uint64	requestingPlayerDbId	= 2;
	required GroupingOperationType	opType	= 3;
	required GroupingOperationResult	opResult	= 4;
	optional bool	hasTemporaryRegions	= 5;
	optional uint64	groupId	= 6;
	optional GroupType	groupType	= 7 [default = GroupType_Invalid];
	optional PerPlayerInfo	leaderInfo	= 8;
	repeated PerPlayerInfo	currentPartyInfo	= 9;
}

message GroupingManagerRemovedPlayer {
	required uint64	requestingGameId	= 1;
	required PerPlayerInfo	removedPlayer	= 2;
	required uint64	groupId	= 3;
	optional PerPlayerInfo	newLeader	= 4;
	optional uint64	previousLeaderDbId	= 6;
	required GroupLeaveReason	leaveReason	= 5;
}

message GroupingManagerAddedPlayer {
	required uint64	requestingGameId	= 1;
	required PerPlayerInfo	addedPlayer	= 2;
	required uint64	groupId	= 3;
}

message GroupingManagerCreateGroup {
	required uint64	requestingGameId	= 1;
	required uint64	groupId	= 2;
	required GroupType	groupType	= 3;
	required PerPlayerInfo	leaderInfo	= 4;
}

message GroupingManagerGroupChangeType {
	required uint64	requestingGameId	= 1;
	required uint64	groupId	= 2;
	required GroupType	type	= 3;
}

message GroupingManagerPlayerEnteredRegion {
	required uint64	playerDbId	= 1;
	required uint64	requestingGameId	= 2;
	required uint64	groupId	= 3;
	required GroupType	groupType	= 4;
	optional PerPlayerInfo	leaderInfo	= 5;
	repeated PerPlayerInfo	members	= 6;
}

message ChatCreateChatRoomResult {
	required uint64	requestingGameId	= 3;
	optional bool	success	= 1 [default = false];
	optional string	reason	= 2;
}

message ChatAddPlayerToRoomResult {
	required uint64	requestingGameId	= 3;
	optional bool	success	= 1 [default = false];
	optional string	reason	= 2;
}

message ChatScrubTextResult {
	required uint64	requestingGameId	= 1;
	required string	textOriginal	= 2;
	required string	textScrubbed	= 3;
	required uint64	remoteJobId	= 4;
}

message ChatServerNotification {
	required string	theMessage	= 1;
}

message ChatClientIsLoggedIn {
	required uint64	requestingGameId	= 1;
	required uint64	playerDbId	= 2;
}

