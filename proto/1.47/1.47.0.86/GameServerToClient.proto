syntax = "proto2";

package Gazillion;

import "GazillionCommon.proto";
import "CommonMessages.proto";
import "ChatCommon.proto";
import "MatchCommon.proto";
import "BillingCommon.proto";
import "Guild.proto";

enum ForceDisconnectReason {
	eFDR_None	= 0;
	eFDR_ForcedDisconnect	= 1;
	eFDR_ErrorLoadingCharacter	= 2;
	eFDR_CheckpointFailed	= 3;
	eFDR_UnableToCreateRegion	= 4;
	eFDR_FulfillmentFailed	= 5;
	eFDR_PSNFailure	= 6;
}

enum CommunityModifyFailureCode {
	eCMFC_Timeout	= 1;
	eCMFC_UnknownPlayer	= 2;
}

enum SwitchToAvatarFailedReason {
	eSAFR_Unknown	= 0;
	eSAFR_InvalidLocation	= 1;
	eSAFR_RegionRestrictionEval	= 2;
	eSAFR_InvalidRegion	= 3;
	eSAFR_SwapInPowerFailedToActivate	= 4;
	eSAFR_RegionRestrictionKwd	= 5;
}

enum GuildLeaveReason {
	eGLR_Left	= 1;
	eGLR_Kicked	= 2;
}

enum GuildMessageCode {
	eGMC_None	= 1;
	eGMC_GuildNameDirty	= 2;
	eGMC_ServicesDown	= 3;
	eGMC_GuildNameInvalidCharacters	= 4;
	eGMC_GuildNameTooShort	= 5;
	eGMC_GuildNameTooLong	= 6;
	eGMC_GuildNameIdentical	= 7;
	eGMC_GuildNotInGuild	= 8;
	eGMC_GuildsLocked	= 9;
	eGMC_GuildMotdInvalidCharacters	= 10;
	eGMC_GuildMotdTooShort	= 11;
	eGMC_GuildMotdTooLong	= 12;
}

enum PlayerTradeStatusCode {
	ePTSC_None	= 0;
	ePTSC_SentInvitation	= 1;
	ePTSC_ReceivedInvitation	= 2;
	ePTSC_TradeInProgress	= 3;
	ePTSC_Disabled	= 4;
	ePTSC_InvalidPartner	= 5;
	ePTSC_PartnerIsBusy	= 6;
	ePTSC_PartnerIsIgnored	= 7;
	ePTSC_Cancelled	= 8;
	ePTSC_PartnerCancelled	= 9;
	ePTSC_TradeExecuted	= 10;
}

message NetMessageReadyAndLoggedIn {
	message ReportDefectConfig {
		required string	host	= 1;
		required string	url	= 2;
		required uint32	port	= 3;
	}

	optional ReportDefectConfig	reportDefectConfig	= 1;
}

message NetMessageReadyForTimeSync {
}

message NetStructGameOptions {
	required bool	teamUpSystemEnabled	= 1;
	required bool	achievementsEnabled	= 3;
	required bool	omegaMissionsEnabled	= 4;
	required bool	veteranRewardsEnabled	= 5;
	required bool	multiSpecRewardsEnabled	= 6;
	required bool	giftingEnabled	= 7;
	required bool	characterSelectV2Enabled	= 8;
	required bool	communityNewsV2Enabled	= 9;
	required bool	leaderboardsEnabled	= 10;
	required bool	dynamicCombatLevelEnabled	= 11;
	required bool	newPlayerExperienceEnabled	= 12;
}

message NetMessageLocalPlayer {
	required uint64	localPlayerEntityId	= 1;
	required NetStructGameOptions	gameOptions	= 2;
}

message NetMessageEntityCreate {
	required bytes	baseData	= 1;
	required bytes	archiveData	= 2;
}

message NetMessageEntityDestroy {
	required uint64	idEntity	= 1;
	optional uint64	prototypeId	= 2;
	optional uint32	cellId	= 3;
	optional uint32	areaId	= 4;
	optional uint64	regionId	= 5;
	optional NetStructPoint3	position	= 6;
	optional uint64	ownerEntityId	= 7;
	optional uint64	ownerPrototypeId	= 8;
	optional string	entityServerString	= 9;
}

message NetMessageEntityTracked {
	required uint64	idEntity	= 1;
	required uint64	trackingProtoId	= 2;
	required uint32	flags	= 3;
}

message NetMessageEntitySelectorAction {
	required uint64	idEntity	= 1;
	required uint64	idTarget	= 2;
	required uint32	entitySelectorActionEventType	= 3;
	required bool	canSend	= 4;
}

message NetMessageInventoryMove {
	required uint64	entityId	= 1;
	required uint64	invLocContainerEntityId	= 2;
	required uint64	invLocInventoryPrototypeId	= 3;
	required uint32	invLocSlot	= 4;
	optional bool	requiredNoOwnerOnClient	= 5;
	optional uint64	entityDataId	= 6;
	optional uint64	destOwnerDataId	= 7;
}

message NetMessageInventoryUnlock {
	required uint64	invProtoId	= 1;
}

message NetMessagePermaBuffUnlock {
	required uint64	permaBuffProtoId	= 1;
}

message NetMessageEntityKill {
	required uint64	idEntity	= 1;
	required uint64	idKillerEntity	= 2;
	required uint32	killFlags	= 3;
}

message NetMessageFullscreenMovieSync {
	required uint32	syncRequestId	= 1;
	repeated uint64	movieProtoId	= 2;
}

message NetMessageQueueFullscreenMovie {
	optional uint64	moviePrototypeId	= 1;
}

message NetMessageQueueLoadingScreen {
	optional uint64	regionPrototypeId	= 1;
	optional uint64	loadingScreenPrototypeId	= 2;
}

message NetMessageDequeueLoadingScreen {
}

message NetMessageRegionChange {
	required uint64	regionId	= 1;
	required uint64	serverGameId	= 2;
	required bool	clearingAllInterest	= 3;
	repeated uint64	entitiestodestroy	= 4;
	optional uint64	regionPrototypeId	= 5;
	optional int32	regionRandomSeed	= 6;
	optional bytes	archiveData	= 7;
	optional NetStructPoint3	regionMin	= 8;
	optional NetStructPoint3	regionMax	= 9;
	optional NetStructCreateRegionParams	createRegionParams	= 10;
}

message NetMessageEntityPosition {
	required uint64	idEntity	= 1;
	required uint32	flags	= 2;
	optional NetStructPoint3	position	= 3;
	optional NetStructPoint3	orientation	= 4;
	optional uint32	cellId	= 5;
	optional uint32	areaId	= 6;
	optional uint64	entityPrototypeId	= 7;
}

message NetMessageLocomotionStateUpdate {
	required bytes	archiveData	= 1;
}

message NetMessageLootRollFailed {
	optional uint64	lootTableProtoId	= 1;
}

message NetMessageInterestPolicies {
	required uint64	idEntity	= 1;
	required uint32	newPolicies	= 2;
	required uint32	prevPolicies	= 3;
	optional uint64	entityDataId	= 4;
}

message NetMessageUnableToChangeRegion {
	required ChangeRegionFailed	changeFailed	= 1;
}

message NetStructAreaConnection {
	required uint32	areaId	= 1;
	required NetStructIPoint2	connectPoint	= 2;
}

message NetMessageAddArea {
	required uint32	areaId	= 1;
	required uint64	areaPrototypeId	= 2;
	required NetStructPoint3	areaOrigin	= 3;
	optional bool	isStartArea	= 4;
}

message NetMessageRemoveArea {
	required uint32	areaId	= 1;
}

message NetStructReservedSpawn {
	required uint64	asset	= 1;
	required uint32	id	= 2;
	required bool	useMarkerOrientation	= 3;
}

message NetMessageCellCreate {
	required uint32	areaId	= 1;
	required uint32	cellId	= 2;
	required uint64	cellPrototypeId	= 3;
	required NetStructPoint3	positionInArea	= 4;
	required int32	cellRandomSeed	= 5;
	repeated NetStructReservedSpawn	encounters	= 6;
	required int32	bufferwidth	= 7;
	required uint64	overrideLocationName	= 8;
}

message NetMessageCellDestroy {
	required uint32	areaId	= 1;
	required uint32	cellId	= 2;
}

message NetMessageEnvironmentUpdate {
	required uint32	flags	= 1;
}

message NetMessageDebugSpawnMapVisualization {
	required bool	visualize	= 1;
	required uint32	areaid	= 2;
	required uint32	boundsx	= 3;
	required uint32	boundsy	= 4;
	optional bytes	mapdata	= 5;
}

message NetMessageChangeAOIPolicies {
	required uint64	idEntity	= 1;
	required uint32	currentpolicies	= 2;
	optional bool	exitGameWorld	= 3;
	optional uint64	entityPrototypeId	= 4;
}

message NetMessageFullInWorldHierarchyUpdateEnd {
	required uint64	idEntity	= 1;
}

message NetMessageFullInWorldHierarchyUpdateBegin {
	required uint64	idEntity	= 1;
}

message NetMessageAdminCommandResponse {
	required string	response	= 1;
	optional string	filecontents	= 2;
	optional string	filerelativepath	= 3;
}

message NetMessageActivatePowerFailed {
	required uint32	reason	= 1;
	required uint64	powerPrototypeId	= 2;
	required int32	avatarIndex	= 3;
}

message NetMessageCancelPower {
	required uint64	idAgent	= 1;
	required uint64	powerPrototypeId	= 2;
	required uint32	endPowerFlags	= 3;
}

message NetMessageContinuousPowerUpdateToClient {
	required uint64	idAvatar	= 1;
	required uint64	powerPrototypeId	= 2;
	optional uint64	idTargetEntity	= 3;
	optional NetStructPoint3	targetPosition	= 4;
	optional uint32	randomSeed	= 5;
}

message NetMessageActivatePower {
	required bytes	archiveData	= 1;
}

message NetMessagePreActivatePower {
	required uint64	idUserEntity	= 1;
	required uint64	powerPrototypeId	= 2;
	required uint64	idTargetEntity	= 3;
	required NetStructPoint3	targetPosition	= 4;
}

message NetMessagePowerResult {
	required bytes	archiveData	= 1;
}

message NetMessagePowerBounce {
	required uint64	idPowerUser	= 1;
	required uint64	idLastTarget	= 2;
	required NetStructPoint3	lastTargetPosition	= 3;
	required uint64	idNewTarget	= 4;
	required uint64	powerPrototypeId	= 5;
	required uint64	userOriginalAssetId	= 6;
	required uint64	userCurrentAssetId	= 7;
	required float	projectileSpeed	= 8;
	required int32	fxRandomSeed	= 9;
}

message NetMessageOnPreInteractPowerEnd {
	required uint64	idTargetEntity	= 1;
	required int32	avatarIndex	= 2;
}

message NetMessageRegionPrimitiveBox {
	required NetStructPoint3	center	= 1;
	required NetStructPoint3	size	= 2;
	required NetStructIPoint3	color	= 3;
	required uint64	lifetimeInMilliseconds	= 4;
	required bool	add	= 5;
}

message NetMessageRegionPrimitiveTriangle {
	required NetStructPoint3	point0	= 1;
	required NetStructPoint3	point1	= 2;
	required NetStructPoint3	point2	= 3;
	required NetStructIPoint3	color	= 4;
	required uint64	lifetimeInMilliseconds	= 5;
	required bool	add	= 6;
}

message NetMessageRegionPrimitiveSphere {
	required NetStructPoint3	center	= 1;
	required float	radius	= 2;
	required NetStructIPoint3	color	= 3;
	required uint64	lifetimeInMilliseconds	= 4;
	required bool	add	= 5;
}

message NetMessageRegionPrimitiveCircle {
	required NetStructPoint3	center	= 1;
	required float	radius	= 2;
	required NetStructIPoint3	color	= 3;
	required uint64	lifetimeInMilliseconds	= 4;
	required bool	add	= 5;
}

message NetMessageRegionPrimitiveLine {
	required NetStructPoint3	start	= 1;
	required NetStructPoint3	end	= 2;
	required NetStructIPoint3	color	= 3;
	required uint64	lifetimeInMilliseconds	= 4;
	required bool	add	= 5;
}

message NetMessageMarkFirstGameFrame {
	required uint64	currentservergametime	= 1;
	required uint64	currentservergameid	= 2;
	required uint64	gamestarttime	= 3;
}

message NetMessageBeginExitGame {
}

message NetMessageSystemMessage {
	required int32	messageId	= 1;
}

message NetMessageAIPerformanceUIUpdate {
	required uint32	timeSlice	= 1;
	required uint32	numAgentsAllocated	= 2;
	required uint32	numAgentsSimulated	= 3;
	required uint32	numThinksInTimeSlice	= 4;
	required uint32	numOctreeQueriesInTimeSlice	= 5;
	required uint32	numLOSChecksInTimeSlice	= 6;
	required uint32	numValidTargetChecksInTimeSlice	= 7;
	required uint32	numGameEntitySweepsInTimeSlice	= 8;
	required uint32	numServerHitchesInTimeSlice	= 9;
	required uint32	numOctreeValidTargetChecksInTimeSlice	= 10;
	required uint32	numAvatarOctreeQueriesInTimeSlice	= 11;
	repeated string	hitchInfoStrArray	= 12;
}

message NetMessageAIDebugUIUpdate {
	required uint64	idTargetNPC	= 1;
	required string	currentActionName	= 2;
	required string	previousActionName	= 3;
	repeated string	sensoryInputs	= 4;
	required string	propertyString	= 5;
	required string	powerResultString	= 6;
}

message NetMessagePropertiesDebugUIUpdate {
	required uint64	idTargetEntity	= 1;
	required string	propertyString	= 2;
	required string	entityString	= 3;
}

message NetMessageConditionsDebugUIUpdate {
	required uint64	idTargetEntity	= 1;
	required string	conditionsString	= 2;
}

message NetMessagePowersDebugUIUpdate {
	required uint64	debugEntityId	= 1;
	required uint64	activePowerId	= 2;
	required int32	pendingActionState	= 3;
	required uint64	pendingPowerId	= 4;
	required uint64	pendingTargetId	= 5;
	required NetStructPoint3	pendingTargetPosition	= 6;
	required uint64	continuousPowerId	= 7;
	required uint64	continuousTargetId	= 8;
	required NetStructPoint3	continuousTargetPosition	= 9;
	required uint64	activePowerLastActivationTime	= 10;
	required bool	isInCombat	= 11;
	required string	serverPowerResultString	= 12;
	required bool	usingControllerInput	= 13;
}

message NetMessageMissionDebugUIUpdate {
	repeated string	missionStrings	= 1;
	optional uint32	resetTimeRemainingSeconds	= 2;
}

message NetMessageDebugEntityPosition {
	required uint64	entityId	= 1;
	required NetStructPoint3	position	= 2;
}

message NetMessageServerFrameProfile {
	required uint32	processingTime	= 1;
	required uint32	frameTime	= 2;
}

message NetMessagePingResponse {
	required bool	displayOutput	= 1;
	required uint64	requestSentClientTime	= 2;
	optional uint64	requestSentGameTime	= 3;
	optional uint64	requestNetReceivedGameTime	= 4;
	optional uint64	responseSendTime	= 5;
	optional uint64	responseNetReceiveClientTime	= 6;
	optional uint64	responseNetReceiveGameTime	= 7;
	optional uint64	serverTickforecast	= 8;
	optional uint64	responseLatencyBufferReceiveClientTime	= 9;
	optional string	gameservername	= 10;
	optional string	frontendname	= 11;
}

message NetMessageEntityEnterGameWorld {
	required bytes	archiveData	= 1;
}

message NetMessageTeleportAckRequest {
	required uint32	ackseq	= 1;
}

message NetMessageServerVersion {
	required string	version	= 1;
}

message NetStructAgentSpec {
	required uint64	agentProtoRef	= 1;
	required uint32	agentLevel	= 2;
	required uint32	creditsAmount	= 3;
}

message NetStructVendorXPSummary {
	required uint64	vendorProtoRef	= 1;
	required uint32	xpAmount	= 2;
}

message NetStructItemSpecStack {
	required uint32	count	= 1;
	required NetStructItemSpec	spec	= 2;
}

message NetStructLootResultSummary {
	repeated NetStructItemSpecStack	items	= 1;
	repeated NetStructAgentSpec	agents	= 2;
	repeated int32	credits	= 3;
	optional uint32	experience	= 4;
	optional uint32	powerPoints	= 5;
	optional uint32	healthBonus	= 6;
	optional uint32	enduranceBonus	= 7;
	optional uint32	realMoney	= 8;
	repeated int64	couponCodes	= 9;
	repeated uint64	callbackNodes	= 10;
	repeated uint64	protorefs	= 11;
	repeated NetStructVendorXPSummary	vendorxp	= 12;
}

message NetStructVaporizedItem {
	optional uint64	itemProtoId	= 1;
	optional uint64	rarityProtoId	= 2;
	optional int32	credits	= 3;
}

message NetMessageVaporizedLootResult {
	repeated NetStructVaporizedItem	items	= 1;
	required uint64	sourceEntityId	= 2;
}

message NetMessageSocketGem {
	required uint64	destItemId	= 1;
	required uint64	gemId	= 2;
}

message NetMessageMissionUpdate {
	required uint64	missionPrototypeId	= 1;
	optional uint32	missionState	= 2;
	optional uint64	missionStateExpireTime	= 3;
	optional NetStructLootResultSummary	rewards	= 4;
	repeated uint64	participants	= 5;
	optional bool	suppressNotification	= 6;
	optional bool	suspendedState	= 7;
}

message NetStructMissionInteractionTag {
	required uint64	entityId	= 1;
	required uint64	regionId	= 2;
}

message NetMessageMissionObjectiveUpdate {
	required uint64	missionPrototypeId	= 1;
	required uint32	objectiveIndex	= 2;
	optional uint32	objectiveState	= 3;
	optional uint64	objectiveStateExpireTime	= 4;
	optional uint32	currentCount	= 5;
	optional uint32	requiredCount	= 6;
	optional uint32	failCurrentCount	= 7;
	optional uint32	failRequiredCount	= 8;
	repeated NetStructMissionInteractionTag	interactedEntities	= 9;
	optional bool	suppressNotification	= 10;
	optional bool	suspendedState	= 11;
}

message NetMessageMissionRewardsResponse {
	required uint64	missionPrototypeId	= 1;
	optional uint32	conditionIndex	= 2;
	optional uint64	entityId	= 3;
	optional NetStructLootResultSummary	showItems	= 4;
	optional NetStructLootResultSummary	giveItems	= 5;
}

message NetMessageCurrentAvatarChanged {
	required int32	avatarIndex	= 1;
	required uint64	lastCurrentEntityId	= 2;
}

message NetMessageNewAvatarAcquired {
	required uint64	prototypeId	= 1;
}

message NetMessageNewTeamUpAcquired {
	required uint64	prototypeId	= 1;
}

message NetStructPrefetchCell {
	required uint32	cellId	= 1;
	required uint64	cellPrototypeId	= 2;
}

message NetMessagePrefetchAssets {
	required uint32	priority	= 1;
	repeated uint64	assets	= 2;
	repeated uint64	prototypes	= 3;
	repeated NetStructPrefetchCell	cells	= 4;
	optional uint64	regionId	= 5;
}

message NetMessagePrefetchRegionsForDownload {
	repeated uint64	prototypes	= 1;
}

message NetMessageQueryIsRegionAvailable {
	required uint64	regionPrototype	= 1;
}

message NetMessageShowOverheadText {
	required uint64	idAgent	= 1;
	required uint64	idText	= 2;
	required float	duration	= 3;
}

message NetMessageShowXPAwardedText {
	required uint64	agentId	= 1;
	required int64	xpAwarded	= 2;
}

message NetMessageAIToggleState {
	required bool	state	= 1;
}

message NetMessageDamageToggleState {
	required bool	state	= 1;
}

message NetMessageDynamicCombatLevelToggleState {
	required bool	state	= 1;
}

message NetMessageMatchTeamRosterNotification {
	required uint64	metaGameEntityId	= 1;
	required uint64	teamPrototypeId	= 2;
	repeated uint64	playerDbGuids	= 3;
}

message NetMessageMatchTeamSizeNotification {
	required uint64	metaGameEntityId	= 1;
	required uint32	teamSize	= 2;
}

message NetMessageChatFromGameSystem {
	required uint64	sourceStringId	= 1;
	required uint64	messageStringId	= 2;
	repeated uint64	argStringIds	= 3;
}

message NetMessageChatFromMetaGame {
	required uint64	sourceStringId	= 1;
	required uint64	messageStringId	= 2;
	optional string	playerName1	= 3;
	optional string	playerName2	= 4;
	repeated uint64	argStringIds	= 5;
}

message NetMessageBroadcastRareItem {
	required string	playerName	= 1;
	required NetStructItemSpec	item	= 2;
	required ChatRoomTypes	roomType	= 3;
}

message NetMessageChatError {
	required ChatErrorMessages	errorMessage	= 1;
}

message NetMessageCatalogItems {
	optional int64	timestamp_seconds	= 1;
	optional int64	timestamp_microseconds	= 2;
	repeated MarvelHeroesCatalogEntry	entries	= 3;
	repeated MHLocalizedCatalogUrls	urls	= 4;
	optional bool	clientmustdownloadimages	= 5;
}

message AwardCouponEntryDesc {
	required string	localeId	= 1;
	required string	description	= 2;
}

message AwardCouponEntry {
	required string	couponId	= 1;
	required float	discount	= 2;
	required string	couponState	= 3;
	required int64	expirationDateUtc	= 4;
	repeated AwardCouponEntryDesc	descriptions	= 5;
	required int64	wsec	= 6;
}

message AwardItemEntry {
	required int64	skuId	= 1;
	required int64	quantity	= 2;
}

message NetMessageGetCurrencyBalanceResponse {
	required int64	currencyBalance	= 1;
	optional AwardCouponEntry	coupon	= 2;
}

message NetMessageBuyItemFromCatalogResponse {
	required bool	didSucceed	= 1;
	required int64	currentCurrencyBalance	= 2;
	optional string	errormessage	= 3;
	required BuyItemResultErrorCodes	errorcode	= 4;
	required int64	skuId	= 5;
	optional bool	isWebPurchase	= 6;
	repeated uint64	protototypeIds	= 7;
	optional AwardCouponEntry	coupon	= 8;
}

message NetMessageBuyGiftForOtherPlayerResponse {
	required bool	didSucceed	= 1;
	optional int64	currentCurrencyBalance	= 2;
	optional string	errormessage	= 3;
	required BuyItemResultErrorCodes	errorcode	= 4;
	optional int64	skuid	= 5;
	optional AwardCouponEntry	coupon	= 6;
}

message NetMessageGrantGToPlayerNotification {
	required bool	didSucceed	= 1;
	required int64	currentCurrencyBalance	= 2;
	optional AwardCouponEntry	coupon	= 3;
}

message NetMessagePurchaseUnlockResponse {
	required uint32	purchaseUnlockResult	= 1;
}

message NetMessageEntityPreviewerNewTarget {
	required uint64	entityId	= 1;
}

message NetMessageRemoteMissionNotification {
	optional uint64	entityPrototypeId	= 1;
	required uint64	dialogTextStringId	= 2;
	required uint64	missionPrototypeId	= 3;
	optional uint64	iconPathOverrideId	= 4;
	optional uint64	voTriggerAssetId	= 5 [default = 0];
}

message NetMessageMetaGameInfoNotification {
	required uint64	entityPrototypeId	= 1;
	required uint64	dialogTextStringId	= 2;
	required uint64	iconPathOverrideId	= 3;
}

message NetMessageClearMetaGameInfoNotification {
}

message NetMessageUINotificationMessage {
	required uint64	uiNotificationRef	= 1;
}

message NetMessageShowPvPScoreboard {
}

message NetMessageStartPvPTimer {
	required uint32	startTime	= 1;
	required uint32	endTime	= 2;
	required uint32	lowTimeWarning	= 3;
	required uint32	criticalTimeWarning	= 4;
	required uint64	metaGameId	= 5;
	required uint64	labelOverrideTextId	= 6;
}

message NetMessageStopPvPTimer {
	required uint64	metaGameId	= 1;
}

message NetMessageSetDifficultyThresholds {
	required uint32	warningThreshold	= 1;
	required uint32	failureThreshold	= 2;
}

message NetMessageSetUITrackedEntityId {
	required uint64	entityId	= 1;
}

message NetMessageSetTimerText {
	required uint64	timerTextId	= 1;
	optional int64	arg1	= 3;
}

message NetMessageSetModeText {
	required uint64	modeTextId	= 1;
	required uint64	modeRef	= 2;
	required uint64	metaGameId	= 3;
}

message NetMessageSetExtraText {
	required uint64	extraTextId	= 1;
}

message NetMessageBannerMessage {
	required uint64	bannerText	= 1;
	required uint64	textStyle	= 2;
	required uint32	timeToLiveMS	= 3;
	required uint32	messageStyle	= 4;
	required bool	doNotQueue	= 5;
	required bool	showImmediately	= 6;
}

message NetMessageHUDTutorial {
	required uint64	hudTutorialProtoId	= 1;
}

message NetMessageRegionAvatarSwapUpdate {
	required bool	enabled	= 1;
}

message NetMessageRegionRestrictedRosterUpdate {
	required bool	enabled	= 1;
}

message NetMessageTeamSelectDialog {
	required uint64	publicEventProtoId	= 1;
}

message NetMessageAIAggroNotification {
	required uint64	bannerMessageRef	= 1;
	required uint64	aiRef	= 2;
	required uint64	playerId	= 3;
}

message NetMessageAITargetChangeNotification {
	required uint64	newTargetid	= 1;
	required uint64	oldTargetid	= 2;
	required uint64	aiId	= 3;
}

message NetMessageStoryNotification {
	required uint64	displayTextStringId	= 1;
	optional uint64	speakingEntityPrototypeId	= 2;
	required uint32	timeToLiveMS	= 3;
	required uint64	voTriggerAssetId	= 4 [default = 0];
	optional uint64	missionPrototypeId	= 5;
}

message NetMessageSyncTimeReply {
	required int64	gameTimeClientSent	= 1;
	required int64	gameTimeServerReceived	= 2;
	required int64	gameTimeServerSent	= 3;
	required int64	dateTimeClientSent	= 4;
	required int64	dateTimeServerReceived	= 5;
	required int64	dateTimeServerSent	= 6;
	required float	dialation	= 7;
	required int64	gametimeDialationStarted	= 8;
	required int64	datetimeDialationStarted	= 9;
}

message NetMessageInitialTimeSync {
	required int64	gameTimeServerSent	= 1;
	required int64	dateTimeServerSent	= 2;
}

message NetMessageSelectStartingAvatarForNewPlayer {
	required bool	showOpeningCinematic	= 1;
}

message NetMessageShowKioskStartScreen {
}

message NetMessageInventoryFull {
	required uint64	playerID	= 1;
	required uint64	itemID	= 2;
}

message NetMessageUnloadPackagesStart {
}

message NetMessageUnloadPackagesEnd {
}

message NetMessageForceDisconnect {
	required ForceDisconnectReason	reason	= 1;
}

message NetMessageLevelUp {
	required uint64	entityID	= 1;
}

message NetMessageOmegaPointGain {
	required uint32	numPointsGained	= 1;
	required uint64	avatarId	= 2;
}

message NetMessageVendorLevelUp {
	required uint64	vendorTypeProtoId	= 1;
	required uint64	vendorID	= 2;
}

message NetMessageVendorRefresh {
	required uint64	vendorTypeProtoId	= 1;
}

message NetMessageCraftingSuccess {
}

message NetMessageCraftingFailure {
	required uint32	craftingResult	= 1;
}

message NetMessagePlayPowerVisuals {
	required uint64	entityId	= 1;
	required uint64	powerAssetRef	= 2;
}

message NetMessageWaypointUnlocked {
	required uint64	waypointPrototypeID	= 1;
}

message NetMessageReplicationArchive {
	required uint64	replicationId	= 1;
	optional uint32	archiveDataType	= 2 [default = 0];
	required bytes	archiveData	= 3;
	optional string	debugstring	= 4;
}

message NetMessageSetProperty {
	required uint64	replicationId	= 1;
	required uint64	propertyId	= 2;
	required uint64	valueBits	= 3;
}

message NetMessageRemoveProperty {
	required uint64	replicationId	= 1;
	required uint64	propertyId	= 2;
}

message NetMessagePvPScoreScoreUpdateEntry {
	required uint32	category	= 1;
	optional int32	ivalue	= 2;
	optional float	fvalue	= 3;
}

message NetMessagePvPScorePlayerNewId {
	required uint64	pvpEntityId	= 1;
	required uint64	playerDbGuid	= 2;
	required string	playerName	= 3;
	required uint64	teamProtoId	= 4;
	required uint64	avatarProtoId	= 5;
}

message NetMessagePvPScorePlayerTeamChange {
	required uint64	pvpEntityId	= 1;
	required uint64	playerDbGuid	= 2;
	required uint64	teamProtoId	= 3;
}

message NetMessagePvPScorePlayerUpdate {
	required uint64	pvpEntityId	= 1;
	required uint64	playerDbGuid	= 2;
	repeated NetMessagePvPScoreScoreUpdateEntry	updates	= 3;
}

message NetMessageTransitionUpdate {
	required uint64	idEntity	= 1;
}

message NetMessageAvatarNameChange {
	required uint64	idEntity	= 1;
}

message NetMessageMissionInteractRepeat {
	required uint64	targetEntityId	= 1;
	required uint64	missionPrototypeId	= 2;
}

message NetMessageMissionInteractRelease {
}

message NetMessageAddCondition {
	required bytes	archiveData	= 1;
}

message NetMessageDeleteCondition {
	required uint64	idEntity	= 1;
	required uint64	key	= 2;
}

message NetMessageEnableCondition {
	required uint64	idEntity	= 1;
	required uint64	key	= 2;
	required bool	enable	= 3;
}

message NetMessageChangeConditionPauseTime {
	required uint64	idEntity	= 1;
	required uint64	key	= 2;
	required uint64	pauseTime	= 3;
	required uint64	startTime	= 4;
}

message NetMessageChangeConditionDuration {
	required uint64	idEntity	= 1;
	required uint64	key	= 2;
	required int64	duration	= 3;
	required uint64	startTime	= 4;
}

message NetMessageAbilitySlotToAbilityBarFromServer {
	required uint64	avatarId	= 1;
	required uint64	prototypeRefId	= 2;
	required uint32	slotNumber	= 3;
	required uint32	keyMappingIndex	= 4;
}

message NetMessageAbilityUnslotFromAbilityBarFromServer {
	required uint64	avatarId	= 1;
	required uint32	keyMappingIndex	= 2;
	required uint32	slotNumber	= 3;
}

message NetMessageAbilitySwapInAbilityBarFromServer {
	required uint64	avatarId	= 1;
	required uint32	slotNumberA	= 2;
	required uint32	slotNumberB	= 3;
}

message NetMessageAssignHotkeyFromServer {
	required uint64	avatarId	= 1;
	required uint64	prototypeRefId	= 2;
	required uint32	keyMappingIndex	= 3;
	required uint32	slotNumber	= 4;
	required uint32	destinationSlotNumber	= 5;
}

message NetMessageUnassignHotkeyFromServer {
	required uint64	avatarId	= 1;
	required uint32	keyMappingIndex	= 2;
	required uint32	slotNumber	= 3;
}

message NetMessagePowerCollectionAssignPower {
	required uint64	entityId	= 1;
	required uint64	powerProtoId	= 2;
	required int32	powerRank	= 3;
	required int32	characterLevel	= 4;
	required int32	combatLevel	= 5;
	required int32	itemLevel	= 6;
	required float	itemVariation	= 7;
}

message NetMessageAssignPowerCollection {
	repeated NetMessagePowerCollectionAssignPower	power	= 1;
}

message NetMessagePowerCollectionUnassignPower {
	required uint64	entityId	= 1;
	required uint64	powerProtoId	= 2;
}

message NetMessageUpdatePowerIndexProps {
	required uint64	entityId	= 1;
	required uint64	powerProtoId	= 2;
	required int32	powerRank	= 3;
	required int32	characterLevel	= 4;
	required int32	combatLevel	= 5;
	required int32	itemLevel	= 6;
	required float	itemVariation	= 7;
}

message NetMessageOnWaypointUpdated {
	required uint64	idPlayer	= 1;
}

message NetMessageInternalReportPlayerLoadError {
	required string	serverReport	= 1;
}

message MessageReportEntry {
	required string	messageName	= 1;
	required uint64	totalCount	= 2;
	required uint64	totalBytes	= 3;
}

message NetMessageMessageReport {
	repeated MessageReportEntry	reports	= 1;
	required uint32	reportSource	= 2;
	required uint32	reportDirection	= 3;
}

message NetMessageUpdateMiniMap {
	required bytes	archiveData	= 1;
}

message NetMessageMoveToAlternateLandingSpot {
	required uint64	idEntity	= 1;
	required NetStructPoint3	landingPosition	= 2;
	required uint64	landingPowerprototypeId	= 3;
}

message NetMessageConsoleMessage {
	required string	messageText	= 1;
}

message NetMessageAvatarOnKilledInfoOverride {
	required uint64	regionId	= 1;
	required uint64	avatarOnKilledInfoProtoId	= 2;
}

message NetMessageOnResurrect {
	required uint64	targetId	= 1;
}

message NetMessageOnResurrectRequest {
	required uint64	targetId	= 1;
	required uint64	resurrectorId	= 2;
}

message NetMessageOnResurrectDecline {
	required uint64	targetId	= 1;
}

message NetMessageReloadPackagesStart {
}

message NetMessagePlayStoryBanter {
	required uint64	banterAssetId	= 1;
}

message NetMessagePlayUISoundTheme {
	required uint64	soundThemeAssetId	= 1;
}

message NetMessagePlayKismetSeq {
	required uint64	kismetSeqPrototypeId	= 1;
}

message NetMessageGracefulDisconnectAck {
}

message NetMessageLiveTuningUpdate {
	repeated NetStructLiveTuningSettingProtoEnumValue	tuningTypeKeyValueSettings	= 1;
}

message NetMessageUpdateSituationalTarget {
	required uint64	powerOwnerId	= 1;
	required uint64	situationalPowerProtoId	= 2;
	required uint64	situationalTargetId	= 3;
	required bool	addTarget	= 4;
}

message NetMessageConfirmStartNewGame {
}

message NetMessageOneTimeSnapCamera {
}

message NetMessageModifyCommunityMemberFailure {
	required string	memberToModifyName	= 1;
	required CommunityModifyFailureCode	failureCode	= 2;
	required uint64	circleId	= 3;
	required ModifyCircleOperation	operation	= 4;
}

message NetMessageModifyCommunityMember {
	required CommunityMemberBroadcast	broadcast	= 1;
	optional string	playerName	= 2;
	optional uint64	systemCirclesBitSet	= 3;
}

message NetMessageReceiveCommunityNotify {
	required CommunityNotify	notify	= 1;
}

message NetMessageItemBindingChanged {
	required uint64	itemId	= 1;
	required bool	accountBound	= 2;
	required uint64	characterProtoId	= 3;
	optional bool	tradeRestricted	= 4;
}

message NetMessageItemsHeldForRecovery {
	repeated uint64	itemIds	= 1;
}

message NetMessageItemRecovered {
	required uint64	itemId	= 1;
}

message NetMessageSwitchToPendingNewAvatarFailed {
	required uint64	targetId	= 1;
	required SwitchToAvatarFailedReason	reason	= 2;
}

message NetMessageCoopStartEntranceFailed {
	required uint64	targetId	= 1;
}

message NetMessageGuildMessageToClient {
	required GuildMessageSetToClient	messages	= 1;
}

message NetMessageEntityGuildInfo {
	required uint64	entityId	= 1;
	required uint64	guildId	= 2;
	required string	guildName	= 3;
	required GuildMembership	guildMembership	= 4;
	optional string	debugEntityServerString	= 5;
}

message NetMessageLeaveGuild {
	required uint64	guildId	= 1;
	required GuildLeaveReason	reason	= 2;
	required string	initiatingPlayerName	= 3;
}

message NetMessageGuildSystemMessage {
	required GuildMessageCode	code	= 1;
}

message NetMessageRegionDifficultyChange {
	required uint64	difficultyIndex	= 1;
}

message NetMessageMetaGameWaveUpdate {
	required uint64	currentWaveCount	= 1;
	required uint64	maxWaveCount	= 2;
	required uint64	metaGameId	= 3;
}

message NetMessagePvEInstanceCrystalUpdate {
	required uint64	currentCrystalCount	= 1;
	required uint64	maxCrystalCount	= 2;
	required uint64	metaGameId	= 3;
}

message NetMessagePvEInstanceDeathUpdate {
	required uint64	currentDeathCount	= 1;
	required uint64	metaGameId	= 2;
}

message NetMessagePvEInstanceRegionScoreUpdate {
	required uint64	currentRegionScore	= 1;
	required uint64	metaGameId	= 2;
}

message NetMessageMetaGameBanner {
	required uint64	messageStringId	= 1;
	optional string	playerName1	= 2;
	optional string	playerName2	= 3;
	repeated uint64	argStringIds	= 4;
	repeated int64	intArgs	= 5;
}

message NetMessagePostDialogToClient {
	required uint64	ServerId	= 1;
	required uint64	playerGuid	= 2;
	required NetStructDialog	dialog	= 3;
}

message NetMessageRemoveDialogFromClient {
	required uint64	serverId	= 1;
	required uint64	playerGuid	= 2;
}

message NetMessageCancelPendingActionToClient {
	required int32	avatarIndex	= 1;
}

message NetMessageRecvAkEventFromEntity {
	required uint32	akEventId	= 1;
	required uint64	entityId	= 2;
	required bool	isVO	= 3;
	required uint32	eventType	= 4;
	optional uint32	cooldownMS	= 5 [default = 0];
}

message NetMessageShowTutorialTip {
	required uint64	tipDataRefId	= 1;
}

message NetMessageMatchQueueUpdateClient {
	required uint64	playerGuid	= 1;
	required uint64	regionProtoId	= 2;
	required uint64	regionRequestGroupId	= 3;
	optional string	playerName	= 4;
	required RegionRequestQueueUpdateVar	status	= 5;
	optional uint32	playersInQueue	= 6;
}

message GlobalEventCriteriaData {
	required uint64	criteriaId	= 1;
	required float	progress	= 2;
}

message NetMessageGlobalEventDataUpdate {
	required uint64	eventId	= 1;
	required float	totalProgress	= 2;
	repeated GlobalEventCriteriaData	criteriaProgress	= 3;
}

message NetMessageGlobalEventLeaderboardUpdate {
	required uint64	eventId	= 1;
	required uint32	leaderboardLength	= 2;
	repeated string	playerNames	= 3;
}

message NetMessageOpenUIPanel {
	required string	panelName	= 1;
	required uint32	tabIndex	= 2;
}

message NetMessagePlayerOwnsItemResponse {
	required uint64	itemProtoId	= 1;
	required bool	owns	= 2;
}

message NetMessageShowShareLegendaryMissionNotification {
	required string	playerName	= 1;
	required uint64	missionDataRef	= 2;
}

message NetMessageShareLegendaryMissionResult {
	required string	playerName	= 1;
	required uint64	missionDataRef	= 2;
	required LegendaryMissionShareResultType	result	= 3;
}

message NetMessageUISyncDataUpdate {
	required uint64	uiSyncDataProtoId	= 1;
	required uint64	contextProtoId	= 2;
	required bytes	buffer	= 3;
}

message NetMessagePlayerTradeStatus {
	required PlayerTradeStatusCode	statusCode	= 1;
	required string	partnerPlayerName	= 2;
	required bool	confirmFlag	= 3;
	required bool	partnerConfirmFlag	= 4;
	required uint32	sequenceNumber	= 5;
}

message NetMessageUISyncDataRemove {
	required uint64	uiSyncDataProtoId	= 1;
	required uint64	contextProtoId	= 2;
}

message AchievementDatabaseDump {
	message AchievementInfo {
		required uint32	id	= 1;
		required bool	enabled	= 2;
		required uint32	parentId	= 3;
		required uint64	name	= 4;
		required uint64	inProgressStr	= 5;
		required uint64	completedStr	= 6;
		required uint64	rewardStr	= 7;
		required uint64	iconPathAssetId	= 8;
		required uint32	score	= 9;
		required uint64	categoryStr	= 10;
		required uint64	subCategoryStr	= 11;
		required float	displayOrder	= 12;
		required uint32	visibleState	= 13;
		required uint32	evaluationType	= 14;
		required uint32	eventtype	= 15;
		required uint32	threshold	= 16;
		required uint32	dependentAchievementId	= 17;
		required uint32	uiProgressDisplayOption	= 18;
		required uint64	publishedDateUS	= 19;
	}

	required bytes	localizedAchievementStringBuffer	= 1;
	repeated AchievementInfo	achievementInfos	= 2;
	required uint64	achievementNewThresholdUS	= 3;
}

message NetMessageAchievementDatabaseDump {
	required bytes	compressedAchievementDatabaseDump	= 1;
}

message NetMessageAchievementStateUpdate {
	message AchievementState {
		required uint32	id	= 1;
		required uint32	count	= 2;
		required uint64	completeddate	= 3;
	}

	repeated AchievementState	achievementStates	= 1;
	required bool	showpopups	= 2;
}

message NetMessagePartyKickGracePeriod {
	required uint64	expireTimeMicroseconds	= 1;
	required GroupLeaveReason	leaveReason	= 2;
}

message NetMessageReceivedGift {
	required uint64	skuId	= 1;
	required uint64	transId	= 2;
	required string	sender	= 3;
	optional string	message	= 4;
}

message NetMessageAchievementCompletedByPartyMember {
	required uint32	id	= 1;
	required string	playerName	= 2;
}

message NetMessageVerifyOnClient {
	required string	message	= 1;
}

message NetMessageInventoryLoaded {
	required uint64	inventoryProtoId	= 1;
}

message NetMessageLeaderboardReportClient {
	required LeaderboardReport	report	= 1;
}

message NetMessageLeaderboardCheatResponseClient {
	required string	cheatResponseText	= 1;
}

message LeaderboardArchivedInstanceListData {
	required uint64	leaderboardId	= 1;
	repeated uint64	archivedInstanceList	= 2;
}

message LeaderboardInitData {
	required uint64	leaderboardId	= 1;
	optional LeaderboardInstanceData	currentInstanceData	= 2;
	repeated LeaderboardInstanceData	archivedInstanceList	= 3;
}

message NetMessageLeaderboardArchivedInstanceListResponse {
	repeated LeaderboardArchivedInstanceListData	instanceList	= 1;
}

message NetMessageLeaderboardInitializeRequestResponse {
	repeated LeaderboardInitData	leaderboardInitDataList	= 1;
}

message NetMessageLeaderboardStateChange {
	required uint64	leaderboardId	= 1;
	required uint64	instanceId	= 2;
	required LeaderboardState	newState	= 3;
	required int64	activationTimestamp	= 4;
	required int64	expirationTimestamp	= 5;
	required bool	visible	= 6;
}

message NetMessageLeaderboardRewarded {
	required uint64	leaderboardId	= 1;
	required uint64	leaderboardInstance	= 2;
	required uint64	rewardGuid	= 3;
	required uint64	rank	= 4;
}

message NetMessageGiftHistoryResult {
	repeated GiftHistoryForPlayerEntry	sent	= 1;
	repeated GiftHistoryForPlayerEntry	received	= 2;
}

message NetMessageStoreTooBusy {
	optional uint64	skuId	= 1;
}

message NetMessageSetDebuggingClient {
	required bool	debugging	= 1;
}

message NetMessageLocalCoopStart {
}

message NetMessageLocalCoopEnd {
}

message NetMessageAwardUpdate {
	required string	awardType	= 1;
	optional AwardCouponEntry	couponData	= 2;
	optional AwardItemEntry	itemData	= 3;
}

message NetMessageDisplayCouponNotifications {
}

message NetMessagePublicEventTeamAssigned {
	required bool	success	= 1;
	required uint64	publicEventProtoId	= 2;
}

